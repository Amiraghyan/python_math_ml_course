# üöÄ ‘±’¥’¢’∏’≤’ª’°’Ø’°’∂ FastAPI ÷Ö÷Ä’´’∂’°’Ø - ‘µ÷Ä÷á’°’∂’µ’°’∂ ’á’°’∏÷Ç÷Ä’¥’°

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, field_validator
from typing import Optional, List
from datetime import datetime
import asyncio

# --- FASTAPI APP ---
app = FastAPI(
    title="Yerevanyan Shawarma API",
    description="ü•ô ‘µ÷Ä÷á’°’∂’µ’°’∂ ’á’°’∏÷Ç÷Ä’¥’° - API for ordering delicious shawarma",
    version="1.0.0",
    docs_url="/docs", # default
    redoc_url="/redoc" # default
)

# --- ’è’é’Ö‘±‘º’Ü‘µ’ê‘ª ’Ñ’à‘¥‘µ‘º’Ü‘µ’ê ---
class ShawarmaItem(BaseModel):
    name: str
    price: int
    available: bool = True
    prep_time: int  # ÷Ä’∏’∫’•’∂’•÷Ä

class OrderCreate(BaseModel):
    customer_name: str
    items: List[str]
    special_requests: Optional[str] = ""
    
    @field_validator('customer_name')
    @classmethod
    def validate_name(cls, v):
        if len(v.strip()) < 2:
            raise ValueError('‘±’∂’∏÷Ç’∂’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ ’∂’æ’°’¶’°’£’∏÷Ç’µ’∂’® 2 ’ø’°’º')
        return v.strip()

class Order(BaseModel):
    id: int
    customer_name: str
    items: List[str]
    total_price: int
    status: str
    created_at: datetime
    estimated_time: int

class OrderResponse(BaseModel):
    status: str
    order: Order
    message: str

# --- "’è’é’Ö‘±‘º’Ü‘µ’ê‘ª ‘≤‘±‘∂‘±" ---
menu_items = {
    "’∞’°’æ’∏’æ": ShawarmaItem(name="’∞’°’æ’∏’æ", price=1500, prep_time=3),
    "’ø’°’æ’°÷Ä’∏’æ": ShawarmaItem(name="’ø’°’æ’°÷Ä’∏’æ", price=1800, prep_time=4),
    "’¢’°’∂’ª’°÷Ä’•’≤’•’∂’∏’æ": ShawarmaItem(name="’¢’°’∂’ª’°÷Ä’•’≤’•’∂’∏’æ", price=1200, prep_time=2),
    "’∞’°’ø’∏÷Ç’Ø": ShawarmaItem(name="’∞’°’ø’∏÷Ç’Ø", price=2200, prep_time=6)
}

orders_storage = {}
next_order_id = 1

# --- ’ï‘∫‘±’Ü‘¥‘±‘ø ’ñ’à’í’Ü‘ø’ë‘ª‘±’Ü‘µ’ê ---

async def validate_menu_items(items: List[str]) -> None:
    """’ç’ø’∏÷Ç’£’•’¨’ù ’°÷Ä’§’µ’∏÷Ñ ’∫’°’ø’æ’´÷Ä’æ’°’Æ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’Ø’°’∂ ÷Å’°’∂’Ø’∏÷Ç’¥"""
    for item in items:
        if item not in menu_items:
            raise HTTPException(
                status_code=404, 
                detail=f"'{item}' ’∑’°’∏÷Ç÷Ä’¥’° ’¥’•’∂÷Ñ ’π’∏÷Ç’∂’•’∂÷Ñ: ‘±’º’Ø’° ’ø’°÷Ä’¢’•÷Ä’°’Ø’∂’•÷Ä’ù {list(menu_items.keys())}"
            )
        if not menu_items[item].available:
            raise HTTPException(
                status_code=422,
                detail=f"'{item}' ’∑’°’∏÷Ç÷Ä’¥’°’∂ ’™’°’¥’°’∂’°’Ø’°’æ’∏÷Ä’°’∫’•’Ω ’¥’°’ø’π’•’¨’´ ’π’ß"
            )

def calculate_order_total(items: List[str]) -> tuple[int, int]:
    """’Ä’°’∑’æ’•’¨ ’∫’°’ø’æ’•÷Ä’´ ’£’∏÷Ç’¥’°÷Ä’® ÷á ’∫’°’ø÷Ä’°’Ω’ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø’®"""
    total_price = sum(menu_items[item].price for item in items)
    total_time = max(menu_items[item].prep_time for item in items)  # ‘±’¥’•’∂’°’•÷Ä’Ø’°÷Ä ’™’°’¥’°’∂’°’Ø
    return total_price, total_time

# --- API ENDPOINTS ---

@app.get("/")
async def root():
    """‘≥’¨’≠’°’æ’∏÷Ä ’ß’ª"""
    return {
        "message": "‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø ‘µ÷Ä÷á’°’∂’µ’°’∂ ’á’°’∏÷Ç÷Ä’¥’° API ü•ô",
        "docs": "/docs",
        "version": "1.0.0"
    }

@app.get("/menu")
async def get_menu():
    """GET /menu - ’ë’°’∂’Ø’´ ’Ω’ø’°÷Å’∏÷Ç’¥"""
    return {
        "status": "success",
        "menu": {name: {"price": item.price, "available": item.available, "prep_time": item.prep_time} 
                for name, item in menu_items.items()}
    }

@app.post("/orders", response_model=OrderResponse)
async def create_order(order_data: OrderCreate):
    """POST /orders - ’Ü’∏÷Ä ’∫’°’ø’æ’•÷Ä ’Ω’ø’•’≤’Æ’∏÷Ç’¥"""
    global next_order_id
    
    # Validation
    await validate_menu_items(order_data.items)
    
    # Calculation
    total_price, prep_time = calculate_order_total(order_data.items)
    
    # Create order
    new_order = Order(
        id=next_order_id,
        customer_name=order_data.customer_name,
        items=order_data.items,
        total_price=total_price,
        status="’£’∏÷Ä’Æ’®’∂’©’°÷Å",
        created_at=datetime.now(),
        estimated_time=prep_time
    )
    
    orders_storage[next_order_id] = new_order
    order_id = next_order_id
    next_order_id += 1
    
    # Simulate cooking
    print(f"ü•ô ’ä’°’ø÷Ä’°’Ω’ø’∏÷Ç’¥ ’•’¥ ’∫’°’ø’æ’•÷Ä #{order_id} ({order_data.customer_name})")
    await asyncio.sleep(0.5)  # Simulation
    
    return OrderResponse(
        status="created",
        order=new_order,
        message=f"’ä’°’ø’æ’•÷Ä #{order_id} ’Ω’ø’•’≤’Æ’æ’•÷Å: ’ä’°’ø÷Ä’°’Ω’ø ’Ø’¨’´’∂’´ {prep_time} ÷Ä’∏’∫’•’∏÷Ç’¥"
    )

@app.get("/orders/{order_id}")
async def get_order(order_id: int):
    """GET /orders/{order_id} - ’Ñ’•’Ø ’∫’°’ø’æ’•÷Ä’´ ’ø’æ’µ’°’¨’∂’•÷Ä"""
    if order_id not in orders_storage:
        raise HTTPException(status_code=404, detail=f"’ä’°’ø’æ’•÷Ä #{order_id} ’π’´ ’£’ø’∂’æ’•’¨")
    
    return {"status": "success", "order": orders_storage[order_id]}

@app.get("/orders")
async def get_all_orders():
    """GET /orders - ‘≤’∏’¨’∏÷Ä ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’®"""
    return {
        "status": "success", 
        "orders": list(orders_storage.values()),
        "total": len(orders_storage)
    }

@app.put("/orders/{order_id}")
async def update_order(order_id: int, new_items: List[str]):
    """PUT /orders/{order_id} - ’ä’°’ø’æ’•÷Ä’® ÷É’∏’≠’•’¨"""
    if order_id not in orders_storage:
        raise HTTPException(status_code=404, detail=f"’ä’°’ø’æ’•÷Ä #{order_id} ’π’´ ’£’ø’∂’æ’•’¨")
    
    order = orders_storage[order_id]
    if order.status != "’£’∏÷Ä’Æ’®’∂’©’°÷Å":
        raise HTTPException(status_code=422, detail="’ä’°’ø÷Ä’°’Ω’ø ’∫’°’ø’æ’•÷Ä’® ’π’´ ’Ø’°÷Ä’•’¨’´ ÷É’∏’≠’•’¨")
    
    await validate_menu_items(new_items)
    total_price, prep_time = calculate_order_total(new_items)
    
    order.items = new_items
    order.total_price = total_price
    order.estimated_time = prep_time
    
    return {"status": "updated", "order": order}

@app.delete("/orders/{order_id}")
async def cancel_order(order_id: int):
    """DELETE /orders/{order_id} - ’ä’°’ø’æ’•÷Ä’® ’π’•’≤’°÷Ä’Ø’•’¨"""
    if order_id not in orders_storage:
        raise HTTPException(status_code=404, detail=f"’ä’°’ø’æ’•÷Ä #{order_id} ’π’´ ’£’ø’∂’æ’•’¨")
    
    order = orders_storage[order_id]
    if order.status == "’∫’°’ø÷Ä’°’Ω’ø":
        raise HTTPException(status_code=422, detail="’ä’°’ø÷Ä’°’Ω’ø ’∫’°’ø’æ’•÷Ä’® ’π’´ ’Ø’°÷Ä’•’¨’´ ’π’•’≤’°÷Ä’Ø’•’¨")
    
    del orders_storage[order_id]
    return {"status": "cancelled", "message": f"’ä’°’ø’æ’•÷Ä #{order_id} ’π’•’≤’°÷Ä’Ø’æ’•÷Å"}

# --- ’Ñ‘ª’ã’à’í‘ø‘±’Ö‘ª’Ü ‘æ’ê‘±‘≥‘ª’ê ---
if __name__ == "__main__":
    import uvicorn
    print("üöÄ ‘≥’∏÷Ä’Æ’°÷Ä’Ø’∏÷Ç’¥ ’•’¥ ‘µ÷Ä÷á’°’∂’µ’°’∂ ’á’°’∏÷Ç÷Ä’¥’° API...")
    print("üìñ Docs: http://localhost:8000/docs")
    print("üîÑ ReDoc: http://localhost:8000/redoc")
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
