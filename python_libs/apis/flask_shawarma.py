# üå∂Ô∏è Flask ÷Ö÷Ä’´’∂’°’Ø - ‘µ÷Ä÷á’°’∂’µ’°’∂ ’á’°’∏÷Ç÷Ä’¥’°

from flask import Flask, request, jsonify
from datetime import datetime
import json

# --- FLASK APP ---
app = Flask(__name__)

# --- "’è’é’Ö‘±‘º’Ü‘µ’ê‘ª ‘≤‘±‘∂‘±" ---
menu_items = {
    "’∞’°’æ’∏’æ": {"name": "’∞’°’æ’∏’æ", "price": 1500, "available": True, "prep_time": 3},
    "’ø’°’æ’°÷Ä’∏’æ": {"name": "’ø’°’æ’°÷Ä’∏’æ", "price": 1800, "available": True, "prep_time": 4},
    "’¢’°’∂’ª’°÷Ä’•’≤’•’∂’∏’æ": {"name": "’¢’°’∂’ª’°÷Ä’•’≤’•’∂’∏’æ", "price": 1200, "available": True, "prep_time": 2},
    "’∞’°’ø’∏÷Ç’Ø": {"name": "’∞’°’ø’∏÷Ç’Ø", "price": 2200, "available": True, "prep_time": 6}
}

orders_storage = {}
next_order_id = 1

# --- ’ï‘∫‘±’Ü‘¥‘±‘ø ’ñ’à’í’Ü‘ø’ë‘ª‘±’Ü‘µ’ê ---

def validate_menu_items(items):
    """’ç’ø’∏÷Ç’£’•’¨’ù ’°÷Ä’§’µ’∏÷Ñ ’∫’°’ø’æ’´÷Ä’æ’°’Æ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’® ’Ø’°’∂ ÷Å’°’∂’Ø’∏÷Ç’¥"""
    for item in items:
        if item not in menu_items:
            return False, f"'{item}' ’∑’°’∏÷Ç÷Ä’¥’° ’¥’•’∂÷Ñ ’π’∏÷Ç’∂’•’∂÷Ñ: ‘±’º’Ø’° ’ø’°÷Ä’¢’•÷Ä’°’Ø’∂’•÷Ä’ù {list(menu_items.keys())}"
        if not menu_items[item]["available"]:
            return False, f"'{item}' ’∑’°’∏÷Ç÷Ä’¥’°’∂ ’™’°’¥’°’∂’°’Ø’°’æ’∏÷Ä’°’∫’•’Ω ’¥’°’ø’π’•’¨’´ ’π’ß"
    return True, "OK"

def calculate_order_total(items):
    """’Ä’°’∑’æ’•’¨ ’∫’°’ø’æ’•÷Ä’´ ’£’∏÷Ç’¥’°÷Ä’® ÷á ’∫’°’ø÷Ä’°’Ω’ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø’®"""
    total_price = sum(menu_items[item]["price"] for item in items)
    total_time = max(menu_items[item]["prep_time"] for item in items)
    return total_price, total_time

# --- API ENDPOINTS ---

@app.route("/")
def root():
    """‘≥’¨’≠’°’æ’∏÷Ä ’ß’ª"""
    return jsonify({
        "message": "‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø ‘µ÷Ä÷á’°’∂’µ’°’∂ ’á’°’∏÷Ç÷Ä’¥’° Flask API ü•ô",
        "menu_url": "/menu",
        "orders_url": "/orders",
        "version": "1.0.0"
    })

@app.route("/menu", methods=["GET"])
def get_menu():
    """GET /menu - ’ë’°’∂’Ø’´ ’Ω’ø’°÷Å’∏÷Ç’¥"""
    return jsonify({
        "status": "success",
        "menu": menu_items
    })

@app.route("/orders", methods=["POST"])
def create_order():
    """POST /orders - ’Ü’∏÷Ä ’∫’°’ø’æ’•÷Ä ’Ω’ø’•’≤’Æ’∏÷Ç’¥"""
    global next_order_id
    
    # Get JSON data
    data = request.get_json()
    
    if not data:
        return jsonify({"error": "JSON data ’π’´ ’£’ø’∂’æ’•’¨"}), 400
    
    # Validation
    required_fields = ["customer_name", "items"]
    for field in required_fields:
        if field not in data:
            return jsonify({"error": f"’ä’°÷Ä’ø’°’§’´÷Ä ’§’°’∑’ø '{field}' ’¢’°÷Å’°’Ø’°’µ’∏÷Ç’¥ ’ß"}), 400
    
    customer_name = data["customer_name"].strip()
    items = data["items"]
    special_requests = data.get("special_requests", "")
    
    if len(customer_name) < 2:
        return jsonify({"error": "‘±’∂’∏÷Ç’∂’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ ’∂’æ’°’¶’°’£’∏÷Ç’µ’∂’® 2 ’ø’°’º"}), 400
    
    # Validate menu items
    is_valid, error_msg = validate_menu_items(items)
    if not is_valid:
        return jsonify({"error": error_msg}), 404
    
    # Calculate
    total_price, prep_time = calculate_order_total(items)
    
    # Create order
    new_order = {
        "id": next_order_id,
        "customer_name": customer_name,
        "items": items,
        "total_price": total_price,
        "status": "’£’∏÷Ä’Æ’®’∂’©’°÷Å",
        "created_at": datetime.now().isoformat(),
        "estimated_time": prep_time,
        "special_requests": special_requests
    }
    
    orders_storage[next_order_id] = new_order
    order_id = next_order_id
    next_order_id += 1
    
    print(f"ü•ô ’ä’°’ø÷Ä’°’Ω’ø’∏÷Ç’¥ ’•’¥ ’∫’°’ø’æ’•÷Ä #{order_id} ({customer_name})")
    
    return jsonify({
        "status": "created",
        "order": new_order,
        "message": f"’ä’°’ø’æ’•÷Ä #{order_id} ’Ω’ø’•’≤’Æ’æ’•÷Å: ’ä’°’ø÷Ä’°’Ω’ø ’Ø’¨’´’∂’´ {prep_time} ÷Ä’∏’∫’•’∏÷Ç’¥"
    }), 201

@app.route("/orders/<int:order_id>", methods=["GET"])
def get_order(order_id):
    """GET /orders/{order_id} - ’Ñ’•’Ø ’∫’°’ø’æ’•÷Ä’´ ’ø’æ’µ’°’¨’∂’•÷Ä"""
    if order_id not in orders_storage:
        return jsonify({"error": f"’ä’°’ø’æ’•÷Ä #{order_id} ’π’´ ’£’ø’∂’æ’•’¨"}), 404
    
    return jsonify({
        "status": "success", 
        "order": orders_storage[order_id]
    })

@app.route("/orders", methods=["GET"])
def get_all_orders():
    """GET /orders - ‘≤’∏’¨’∏÷Ä ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’®"""
    return jsonify({
        "status": "success", 
        "orders": list(orders_storage.values()),
        "total": len(orders_storage)
    })

@app.route("/orders/<int:order_id>", methods=["PUT"])
def update_order(order_id):
    """PUT /orders/{order_id} - ’ä’°’ø’æ’•÷Ä’® ÷É’∏’≠’•’¨"""
    if order_id not in orders_storage:
        return jsonify({"error": f"’ä’°’ø’æ’•÷Ä #{order_id} ’π’´ ’£’ø’∂’æ’•’¨"}), 404
    
    order = orders_storage[order_id]
    if order["status"] != "’£’∏÷Ä’Æ’®’∂’©’°÷Å":
        return jsonify({"error": "’ä’°’ø÷Ä’°’Ω’ø ’∫’°’ø’æ’•÷Ä’® ’π’´ ’Ø’°÷Ä’•’¨’´ ÷É’∏’≠’•’¨"}), 422
    
    data = request.get_json()
    if not data or "items" not in data:
        return jsonify({"error": "’Ü’∏÷Ä items ’§’°’∑’ø’® ’∫’°÷Ä’ø’°’§’´÷Ä ’ß"}), 400
    
    new_items = data["items"]
    
    # Validate
    is_valid, error_msg = validate_menu_items(new_items)
    if not is_valid:
        return jsonify({"error": error_msg}), 404
    
    total_price, prep_time = calculate_order_total(new_items)
    
    order["items"] = new_items
    order["total_price"] = total_price
    order["estimated_time"] = prep_time
    
    return jsonify({"status": "updated", "order": order})

@app.route("/orders/<int:order_id>", methods=["DELETE"])
def cancel_order(order_id):
    """DELETE /orders/{order_id} - ’ä’°’ø’æ’•÷Ä’® ’π’•’≤’°÷Ä’Ø’•’¨"""
    if order_id not in orders_storage:
        return jsonify({"error": f"’ä’°’ø’æ’•÷Ä #{order_id} ’π’´ ’£’ø’∂’æ’•’¨"}), 404
    
    order = orders_storage[order_id]
    if order["status"] == "’∫’°’ø÷Ä’°’Ω’ø":
        return jsonify({"error": "’ä’°’ø÷Ä’°’Ω’ø ’∫’°’ø’æ’•÷Ä’® ’π’´ ’Ø’°÷Ä’•’¨’´ ’π’•’≤’°÷Ä’Ø’•’¨"}), 422
    
    del orders_storage[order_id]
    return jsonify({
        "status": "cancelled", 
        "message": f"’ä’°’ø’æ’•÷Ä #{order_id} ’π’•’≤’°÷Ä’Ø’æ’•÷Å"
    })

# --- ERROR HANDLERS ---

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "‘∑’ª’® ’π’´ ’£’ø’∂’æ’•’¨"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "’Ü’•÷Ä÷Ñ’´’∂ ’Ω’≠’°’¨"}), 500

# --- ’Ñ‘ª’ã’à’í‘ø‘±’Ö‘ª’Ü ‘æ’ê‘±‘≥‘ª’ê ---
if __name__ == "__main__":
    print("üå∂Ô∏è ‘≥’∏÷Ä’Æ’°÷Ä’Ø’∏÷Ç’¥ ’•’¥ ‘µ÷Ä÷á’°’∂’µ’°’∂ ’á’°’∏÷Ç÷Ä’¥’° Flask API...")
    print("üåç Server: http://localhost:5000")
    app.run(debug=True, host="0.0.0.0", port=5000)
