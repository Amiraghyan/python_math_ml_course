---
title: "HW 00: Sets, Combinatorics, Functions"
---

<script src="homework-scripts.js"></script>

# Sets

## 01 Two-annotator inclusion–exclusion {data-difficulty="1"}
Out of 1,000 images, annotator $A$ flags 260 as "elephant," annotator $B$ flags 310 as "elephant," and both flag 190.

a) How many images at least one annotator called "elephant"?
b) How many images neither annotator called "elephant"?


## 02 Train/Test leakage {data-difficulty="2"}
*Context:* When creating Machine Learning (ML) models, we split the data into 2 parts - one for training the model and one for testing how good it is (well, we actually usually split to 3 parts - train, validation, test, but for this problem we'll go with the half-truth)

You collected **200** images. Train set $T$ has 140 indices; Test set $S$ has 40. We noticed an overlap $|T\cap S|=4$.

1. Are the splits disjoint? If not, how many **unique** images actually exist across both sets?
2. How many items must be **moved** to make $T$ and $S$ **disjoint** with target sizes $140$ and $40$ (no duplicates)? Propose a minimal-move strategy.

## 03 Divisibility via inclusion–exclusion {data-difficulty="2"}
How many integers in ${1,\dots,100}$ are divisible by $5$ **or** $7$.

# Combinatorics

## 05: Augmentation pipeline counting {data-difficulty="1"}
*Context:* Sometimes we have the need of expanding our dataset size, but we can't acquire more data. For such cases we use a technique called **data augmentation** to artificially expand the size of a training dataset by creating modified versions of images in the dataset - like rotating them, flipping and so on.

An image pipeline does: random crop (3 sizes), color jitter (on/off), horizontal flip (on/off), and chooses one of 4 background textures.

Assuming independence, how many distinct augmentation "recipes" can be produced for a given image? Example recipe is (crop: 2nd size, flip: 1 (on), texture: 3rd type).


## 06: Two hyperparameters — combinations {data-difficulty="1"}
*Context:* In ML, we often need to prespecify some parameters (we call them hyperparameters) beforehand - for example we need to choose which optimization algorithm to chose.

Let hyperparameter set $H_1$ have $m$ options and $H_2$ have $n$ options.

If we want to try the whole grid of options how many combinations do we have?

## 07: Armenian car plates {data-difficulty="2"}
State your **assumptions** about the plate format (e.g., `DD LL DDD`, digits 0–9, letters A–Z, repetition allowed).

a) Under your stated format, how many distinct plates exist?

b) How does the answer change if letters cannot repeat inside the same plate?

## 08: Anagrams of "cheese" {data-difficulty="2"}
How many distinct words can you form by rearranging the letters of "cheese"? (Handle repeated letters carefully.)

# Functions

## 09: Real-world examples {data-difficulty="1"}
Give one **real** example (and short justification) for each:

- Injective (one-to-one, not necessarily onto)

- Surjective (onto, not necessarily one-to-one)

- Bijective (one-to-one and onto)

## 10: Counting small functions {data-difficulty="2"}
How many functions $f:\{1,2,3\}\to\{a,b\}$?

How many are **injective**? How many are **surjective**? *(Hint: total is $2^3$.)*

## 11: Even/odd — activation symmetry {data-difficulty="2"}
Classify each as **even**, **odd**, or **neither**, and briefly note the symmetry implication:

- $f(x)=x^2$ (parabola)

- $g(x)=x^3$

- $h(x)=\tanh(x)$

- $p(x)=\mathrm{ReLU}(x)=\max(0,x)$

## 12: Function properties {data-difficulty="2"}
Given $f(x)=x+3x^2$, determine:

- Is it injective or not?
- Is it surjective or not?
- Is it bijective or not?
- What is the image of $A$ under $f$, when $A=[-1,2]$?
- What is the preimage of $B$ under $f$, when $B=[0,5]$?
  
Briefly justify each answer.

## 13: Both even and odd {data-difficulty="3"}
Describe **all** functions $f:\mathbb{R}\to\mathbb{R}$ that are simultaneously even and odd. Prove your claim.

## Inclusion–exclusion for surjections {data-difficulty="3"} {.bonus-problem}
Count **surjective** functions $f:\{1,2,3,4\}\to\{a,b,c\}$ using inclusion–exclusion. Show your work.

